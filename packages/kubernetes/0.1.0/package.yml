# Docker compose Package

matches:
  - trigger: ":kubedeploy"
    replace: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: nginx-deployment
          labels:
            app: nginx
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: nginx
          template:
            metadata:
              labels:
                app: nginx
            spec:
              containers:
              - name: nginx
                image: nginx:1.14.2
                ports:
                - containerPort: 80

  - trigger: ":kubeservice"
    replace: |
        apiVersion: v1
        kind: Service
        metadata:
          name: my-service
        spec:
          selector:
            app.kubernetes.io/name: MyApp
          ports:
            - protocol: TCP
              port: 80
              targetPort: 9376

  - trigger: ":kubepoddebug"
    replace: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: ubuntu
        spec:
          containers:
          - name: ubuntu
            image: ubuntu:latest
            # Just spin & wait forever
            command: [ "/bin/bash", "-c", "--" ]
            args: [ "while true; do sleep 30; done;" ]
   
  - trigger: ":kubecronjob"
    replace: |   
        apiVersion: batch/v1
        kind: CronJob
        metadata:
          name: hello
        spec:
          schedule: "* * * * *"
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - name: hello
                    image: busybox:1.28
                    imagePullPolicy: IfNotPresent
                    command:
                    - /bin/sh
                    - -c
                    - date; echo Hello from the Kubernetes cluster
                  restartPolicy: OnFailure
   
  - trigger: ":kubepvc"
    replace: |   
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: my-pvc
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi

          
  - trigger: ":kubeingressroute"
    replace: |         
        apiVersion: traefik.containo.us/v1alpha1
        kind: IngressRoute
        metadata:
          name: domain-name-tls
        spec:
          entryPoints:
          - websecure
          routes:
          - match: Host(`domain-name`)
            kind: Rule
            services:
            - name: nginx
              port: 80
          tls:
            certResolver: letsencrypt

  - trigger: ":kubeingress"
    replace: |
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: minimal-ingress
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
        spec:
          ingressClassName: nginx-example
          rules:
          - http:
              paths:
              - path: /testpath
                pathType: Prefix
                backend:
                  service:
                    name: test
                    port:
                      number: 80  

  - trigger: ":kubeconfigmap"
    replace: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: my-configmap
        data:
          key1: value1
          key2: value2

  - trigger: ":kubesecret"
    replace: |
        apiVersion: v1
        kind: Secret
        metadata:
          name: my-secret
        type: Opaque
        data:
          key1: <base64-encoded-value1>
          key2: <base64-encoded-value2>
